{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14020\viewh13840\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
Single Responsibility Principle
\f1\b0  : Une classe ne doit avoir qu'une seule t\'e2che, donc une seule raison de changer.\

\f0\b Open/Closed Principle
\f1\b0  : Le code doit \'eatre facile \'e0 \'e9tendre sans avoir \'e0 le modifier.\

\f0\b Liskov Substitution Principle (LSP)
\f1\b0  : On doit pouvoir remplacer une classe par une de ses sous-classes sans que \'e7a casse le programme.\

\f0\b Interface Segregation Principle (ISP)
\f1\b0  : Il vaut mieux avoir plusieurs petites interfaces sp\'e9cifiques qu'une seule grosse interface g\'e9n\'e9rale.\

\f0\b Dependency Inversion Principle (DIP)
\f1\b0  : Les classes importantes ne doivent pas d\'e9pendre des classes de d\'e9tail ; elles doivent toutes deux d\'e9pendre d'abstractions.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 \outl0\strokewidth0 \strokec2 Singleton
\f1\b0  : Limite une classe \'e0 une seule instance, ce qui peut cr\'e9er des d\'e9pendances globales et compliquer les tests unitaires.
\f2\fs26 \
\pard\pardeftab720\partightenfactor0
\cf0 class Singleton \{\
    private static $instance = null;\
\
    private function __construct() \{\}\
\
    public static function getInstance() \{\
        if (self::$instance === null) \{\
            self::$instance = new Singleton();\
        \}\
        return self::$instance;\
    \}\
\}\
\
$instance = Singleton::getInstance();\
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 Tight Coupling
\f1\b0  : Une forte d\'e9pendance entre les classes rend le code difficile \'e0 modifier et \'e0 tester.
\f2\fs26 \
\pard\pardeftab720\partightenfactor0
\cf0 class A \{\
    public function doSomething() \{\
        $b = new B();\
        $b->perform();\
    \}\
\}\
\
class B \{\
    public function perform() \{\
        echo "Action r\'e9alis\'e9e";\
    \}\
\}\
\
$a = new A();\
$a->doSomething();\
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 Untestability
\f1\b0  : Un code difficile \'e0 tester d\'e9coule souvent d'une mauvaise s\'e9paration des pr\'e9occupations ou de d\'e9pendances mal g\'e9r\'e9es.
\f2\fs26 \
\pard\pardeftab720\partightenfactor0
\cf0 class UntestableClass \{\
    public function fetchData() \{\
        $data = file_get_contents('https://example.com/api/data');\
        return json_decode($data, true);\
    \}\
\}\
\
$untestable = new UntestableClass();\
$data = $untestable->fetchData();\
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 Premature Optimization
\f1\b0  : Optimiser trop t\'f4t complique le code sans b\'e9n\'e9fice significatif imm\'e9diat.
\f2\fs26 \
\pard\pardeftab720\partightenfactor0
\cf0 function getFibonacci($n) \{\
    if ($n <= 1) return $n;\
    return getFibonacci($n - 1) + getFibonacci($n - 2);\
\}\
\
echo getFibonacci(10);\
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 Indescriptive Naming
\f1\b0  : Des noms de variables ou de fonctions peu descriptifs rendent le code difficile \'e0 comprendre.
\f2\fs26 \
\pard\pardeftab720\partightenfactor0
\cf0 class X \{\
    private $y;\
\
    public function __construct($y) \{\
        $this->y = $y;\
    \}\
\
    public function z() \{\
        return $this->y * 2;\
    \}\
\}\
\
$x = new X(10);\
echo $x->z();\
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 Duplication
\f1\b0  : La duplication de code rend la maintenance difficile et augmente les erreurs.
\f2\fs26 \
\pard\pardeftab720\partightenfactor0
\cf0 class User \{\
    public function getFullName() \{\
        return $this->firstName . ' ' . $this->lastName;\
    \}\
\}\
\
class Customer \{\
    public function getFullName() \{\
        return $this->firstName . ' ' . $this->lastName;\
    \}\
\}\
\
$user = new User();\
echo $user->getFullName();\
\
$customer = new Customer();\
echo $customer->getFullName();\
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf0 \outl0\strokewidth0 \
\
\
}